"""
RCA Report Generator
Generates Markdown reports from analysis snapshots and chat history
"""
import os
import json
from datetime import datetime


def generate_markdown_report(snapshot, chat_history, ruled_out, conclusion, output_dir=None):
    """
    Generate a Markdown report from analysis snapshot and chat history

    Args:
        snapshot: Analysis snapshot dict
        chat_history: List of chat messages
        ruled_out: List of ruled-out hypotheses
        conclusion: Final conclusion string
        output_dir: Directory to save report (default: backend/diagnostics/)

    Returns:
        str: Path to generated report file
    """
    # Determine output directory
    if output_dir is None:
        script_dir = os.path.dirname(os.path.abspath(__file__))
        output_dir = os.path.join(script_dir, 'diagnostics')

    os.makedirs(output_dir, exist_ok=True)

    # Generate filename
    snapshot_id = snapshot.get('id', snapshot.get('timestamp', 'unknown'))
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    filename = f"RCA_Report_{snapshot_id}_{timestamp}.md"
    filepath = os.path.join(output_dir, filename)

    # Build markdown content
    report_lines = []

    # Header
    report_lines.append(f"# TEP Root Cause Analysis Report")
    report_lines.append(f"\n**Analysis ID**: {snapshot_id}")
    report_lines.append(f"**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    report_lines.append(f"**Report Email**: chennan.li@se.com")
    report_lines.append("\n---\n")

    # Analysis Summary
    report_lines.append("## Analysis Summary\n")
    report_lines.append(f"**Timestamp**: {snapshot.get('timestamp', 'Unknown')}\n")

    # Feature Analysis
    if snapshot.get('feature_analysis'):
        report_lines.append("### Feature-Based Analysis\n")
        report_lines.append("```")
        report_lines.append(snapshot['feature_analysis'])
        report_lines.append("```\n")

    # LLM Analyses
    if snapshot.get('llm_analyses'):
        report_lines.append("### AI Model Analyses\n")
        for model_name, model_data in snapshot['llm_analyses'].items():
            if model_data and model_data.get('analysis'):
                report_lines.append(f"#### {model_name.upper()} Analysis\n")
                report_lines.append(model_data['analysis'])
                report_lines.append("\n")

    # Interactive Discussion
    if chat_history and len(chat_history) > 0:
        report_lines.append("---\n")
        report_lines.append("## Interactive RCA Discussion\n")
        report_lines.append("*The following discussion was conducted with the RAG-enabled assistant:*\n")

        for i, msg in enumerate(chat_history):
            role = msg.get('role', 'unknown')
            content = msg.get('content', '')
            timestamp = msg.get('timestamp', '')
            model_used = msg.get('model_used', '')

            if role == 'user':
                report_lines.append(f"### 👤 User ({timestamp})\n")
                report_lines.append(f"{content}\n")
            elif role == 'assistant':
                model_label = f" - {model_used}" if model_used else ""
                report_lines.append(f"### 🤖 Assistant{model_label} ({timestamp})\n")
                report_lines.append(f"{content}\n")

                # Include knowledge sources if available
                sources = msg.get('sources', [])
                if sources:
                    report_lines.append("\n**Knowledge Sources:**\n")
                    for src in sources:
                        source_name = src.get('source', 'Unknown')
                        section = src.get('section', '')
                        relevance = src.get('relevance', 0)
                        page = src.get('page', '')

                        page_str = f" (p.{page})" if page else ""
                        report_lines.append(f"- {source_name}{page_str} - {section} (Relevance: {relevance*100:.0f}%)")
                    report_lines.append("\n")

    # Ruled-Out Hypotheses
    if ruled_out and len(ruled_out) > 0:
        report_lines.append("---\n")
        report_lines.append("## Ruled-Out Hypotheses\n")
        for i, hypothesis in enumerate(ruled_out, 1):
            report_lines.append(f"{i}. {hypothesis}")
        report_lines.append("\n")

    # Final Conclusion
    report_lines.append("---\n")
    report_lines.append("## Final Conclusion\n")
    report_lines.append(f"{conclusion}\n")

    # Footer
    report_lines.append("\n---\n")
    report_lines.append("*Report generated by TEP RCA System*\n")
    report_lines.append(f"*Contact: chennan.li@se.com*")

    # Write to file
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write('\n'.join(report_lines))

    print(f"✅ Markdown report generated: {filepath}")
    return filepath


def generate_pdf_report(snapshot, chat_history, ruled_out, conclusion):
    """
    Generate PDF report using reportlab

    Falls back to Markdown if reportlab is not installed
    """
    try:
        from reportlab.lib.pagesizes import letter, A4
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib.units import inch
        from reportlab.lib import colors
        from reportlab.lib.enums import TA_LEFT, TA_CENTER
        import os
        from datetime import datetime

        # Determine output directory
        script_dir = os.path.dirname(os.path.abspath(__file__))
        output_dir = os.path.join(script_dir, 'diagnostics')
        os.makedirs(output_dir, exist_ok=True)

        # Generate filename
        snapshot_id = snapshot.get('id', snapshot.get('timestamp', 'unknown'))
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"RCA_Report_{snapshot_id}_{timestamp}.pdf"
        filepath = os.path.join(output_dir, filename)

        # Create PDF document
        doc = SimpleDocTemplate(filepath, pagesize=letter,
                                rightMargin=72, leftMargin=72,
                                topMargin=72, bottomMargin=18)

        # Container for PDF elements
        story = []
        styles = getSampleStyleSheet()

        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            textColor=colors.HexColor('#0066cc'),
            spaceAfter=30,
            alignment=TA_CENTER
        )

        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=16,
            textColor=colors.HexColor('#0066cc'),
            spaceAfter=12,
            spaceBefore=12
        )

        subheading_style = ParagraphStyle(
            'CustomSubHeading',
            parent=styles['Heading3'],
            fontSize=14,
            textColor=colors.HexColor('#333333'),
            spaceAfter=10,
            spaceBefore=10
        )

        normal_style = styles['BodyText']
        code_style = ParagraphStyle(
            'Code',
            parent=styles['Code'],
            fontSize=9,
            leftIndent=20,
            textColor=colors.HexColor('#333333'),
            backColor=colors.HexColor('#f5f5f5')
        )

        # Title
        story.append(Paragraph("TEP Root Cause Analysis Report", title_style))
        story.append(Spacer(1, 12))

        # Metadata
        metadata_data = [
            ['Analysis ID:', str(snapshot_id)],
            ['Generated:', datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
            ['Contact:', 'chennan.li@se.com'],
            ['Timestamp:', snapshot.get('timestamp', 'Unknown')]
        ]
        metadata_table = Table(metadata_data, colWidths=[2*inch, 4*inch])
        metadata_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#666666')),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ]))
        story.append(metadata_table)
        story.append(Spacer(1, 20))

        # Analysis Summary
        story.append(Paragraph("Analysis Summary", heading_style))

        # Feature Analysis
        if snapshot.get('feature_analysis'):
            story.append(Paragraph("Feature-Based Analysis", subheading_style))
            feature_text = snapshot['feature_analysis'].replace('\n', '<br/>')
            story.append(Paragraph(feature_text, code_style))
            story.append(Spacer(1, 12))

        # LLM Analyses
        if snapshot.get('llm_analyses'):
            story.append(Paragraph("AI Model Analyses", subheading_style))
            for model_name, model_data in snapshot['llm_analyses'].items():
                if model_data and model_data.get('analysis'):
                    story.append(Paragraph(f"<b>{model_name.upper()} Analysis</b>", normal_style))
                    # Clean up markdown formatting for PDF
                    analysis_text = model_data['analysis']
                    analysis_text = analysis_text.replace('#', '').replace('**', '<b>').replace('**', '</b>')
                    analysis_text = analysis_text.replace('\n\n', '<br/><br/>')
                    story.append(Paragraph(analysis_text, normal_style))
                    story.append(Spacer(1, 12))

        # Interactive Discussion
        if chat_history and len(chat_history) > 0:
            story.append(PageBreak())
            story.append(Paragraph("Interactive RCA Discussion", heading_style))
            story.append(Paragraph("<i>The following discussion was conducted with the RAG-enabled assistant</i>", normal_style))
            story.append(Spacer(1, 12))

            for msg in chat_history:
                role = msg.get('role', 'unknown')
                content = msg.get('content', '')
                timestamp = msg.get('timestamp', '')
                model_used = msg.get('model_used', '')

                if role == 'user':
                    story.append(Paragraph(f"<b>👤 User</b> ({timestamp})", subheading_style))
                elif role == 'assistant':
                    model_label = f" - {model_used}" if model_used else ""
                    story.append(Paragraph(f"<b>🤖 Assistant{model_label}</b> ({timestamp})", subheading_style))

                # Clean content for PDF
                content_clean = content.replace('\n\n', '<br/><br/>').replace('#', '')
                story.append(Paragraph(content_clean, normal_style))

                # Knowledge sources
                sources = msg.get('sources', [])
                if sources:
                    story.append(Spacer(1, 6))
                    story.append(Paragraph("<b>Knowledge Sources:</b>", normal_style))
                    for src in sources:
                        source_name = src.get('source', 'Unknown')
                        section = src.get('section', '')
                        relevance = src.get('relevance', 0)
                        page = src.get('page', '')
                        page_str = f" (p.{page})" if page else ""
                        story.append(Paragraph(
                            f"• {source_name}{page_str} - {section} (Relevance: {relevance*100:.0f}%)",
                            normal_style
                        ))

                story.append(Spacer(1, 12))

        # Final Conclusion
        story.append(PageBreak())
        story.append(Paragraph("Final Conclusion", heading_style))
        conclusion_clean = conclusion.replace('\n\n', '<br/><br/>')
        story.append(Paragraph(conclusion_clean, normal_style))
        story.append(Spacer(1, 20))

        # Footer
        story.append(Spacer(1, 20))
        story.append(Paragraph("<i>Report generated by TEP RCA System</i>", normal_style))
        story.append(Paragraph("<i>Contact: chennan.li@se.com</i>", normal_style))

        # Build PDF
        doc.build(story)

        print(f"✅ PDF report generated: {filepath}")
        return filepath

    except ImportError as e:
        print(f"⚠️ PDF generation requires reportlab: {e}")
        print("   Falling back to Markdown format")
        print("   To enable PDF: pip install reportlab")
        return generate_markdown_report(snapshot, chat_history, ruled_out, conclusion)
    except Exception as e:
        print(f"❌ PDF generation failed: {e}")
        print("   Falling back to Markdown format")
        return generate_markdown_report(snapshot, chat_history, ruled_out, conclusion)


def generate_markdown_fallback(snapshot, chat_history, ruled_out, conclusion):
    """Fallback to Markdown report"""
    return generate_markdown_report(snapshot, chat_history, ruled_out, conclusion)


if __name__ == "__main__":
    # Test report generation
    test_snapshot = {
        'id': 1729123456789,
        'timestamp': '2025-10-18T10:15:23',
        'feature_analysis': 'Top 6 contributing features:\n1. Feature A (importance: 0.85)\n2. Feature B (importance: 0.72)',
        'llm_analyses': {
            'anthropic': {
                'analysis': '## Root Cause Analysis\n\nBased on the sensor data, the primary root cause is catalyst deactivation...'
            }
        }
    }

    test_chat = [
        {
            'role': 'user',
            'content': 'What caused this fault?',
            'timestamp': '2025-10-18T10:20:00'
        },
        {
            'role': 'assistant',
            'content': 'Based on the analysis, the fault was caused by catalyst deactivation...',
            'timestamp': '2025-10-18T10:20:05',
            'model_used': 'anthropic',
            'sources': [
                {
                    'source': 'TEP_Manual.pdf',
                    'section': 'Fault Descriptions',
                    'relevance': 0.92,
                    'page': 45
                }
            ]
        }
    ]

    test_conclusion = "Root cause confirmed: Catalyst deactivation in reactor. Recommended action: Regenerate catalyst."

    # Test PDF generation (falls back to Markdown if reportlab not available)
    report_path = generate_pdf_report(test_snapshot, test_chat, [], test_conclusion)
    print(f"Test report generated: {report_path}")
